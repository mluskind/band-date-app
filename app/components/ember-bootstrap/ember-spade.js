var define, requireModule;

(function() {
  var registry = {}, seen = {};

  define = function(name, deps, callback) {
    registry[name] = { deps: deps, callback: callback };
  };

  requireModule = function(name) {
    if (seen[name]) { return seen[name]; }
    seen[name] = {};

    var mod, deps, callback, reified , exports;

    mod = registry[name];

    if (!mod) {
      throw new Error("Module '" + name + "' not found.");
    }

    deps = mod.deps;
    callback = mod.callback;
    reified = [];
    exports;

    for (var i=0, l=deps.length; i<l; i++) {
      if (deps[i] === 'exports') {
        reified.push(exports = {});
      } else {
        reified.push(requireModule(deps[i]));
      }
    }

    var value = callback.apply(this, reified);
    return seen[name] = exports || value;
  };
})();
minispade.register('ember-bootstrap/core', "(function() {var Bootstrap = window.Bootstrap = Ember.Namespace.create();\n\n})();\n//@ sourceURL=ember-bootstrap/core");minispade.register('ember-bootstrap/forms', "(function() {window.Bootstrap.Forms = Ember.Namespace.create({\n\n  human: function(value) {\n    if (value === undefined || value === false)\n      return;\n\n    // Underscore string\n    value = Ember.String.decamelize(value);\n    // Replace all _ with spaces\n    value = value.replace(/_/g, \" \");\n    // Capitalize the first letter of every word\n    value = value.replace(/(^|\\s)([a-z])/g, function(m,p1,p2){ return p1+p2.toUpperCase(); });\n    return value;\n  }\n});\n\n})();\n//@ sourceURL=ember-bootstrap/forms");minispade.register('ember-bootstrap/forms/checkbox', "(function() {var Bootstrap = window.Bootstrap;\nBootstrap.Forms.Checkbox = Bootstrap.Forms.Field.extend({\n\n  inputField: Ember.Checkbox.extend({\n    attributeBindings: ['name'],\n    checkedBinding:   'parentView.checked',\n    disabledBinding: 'parentView.disabled',\n    classNameBindings: ['parentView.inputClassNames'],\n    name: Ember.computed(function() {\n      return this.get('parentView.name') || this.get('parentView.label');\n    }).property('parentView.name', 'parentView.label')\n  })\n});\n})();\n//@ sourceURL=ember-bootstrap/forms/checkbox");minispade.register('ember-bootstrap/forms/field', "(function() {var Bootstrap = window.Bootstrap;\nBootstrap.Forms.Field = Ember.View.extend({\n  tagName: 'div',\n  classNames: ['control-group'],\n  labelCache: undefined,\n  help: undefined,\n  template: Ember.Handlebars.compile([\n    '{{view view.labelView viewName=\"labelView\"}}',\n    '<div class=\"controls\">',\n    '  {{view view.inputField viewName=\"inputField\"}}',\n    '  {{view view.errorsView}}',\n    '  {{view view.helpView}}',\n    '</div>'].join(\"\\n\")),\n\n  label: Ember.computed(function(key, value) {\n    if(arguments.length === 1){\n      if(this.get('labelCache') === undefined){\n        var path = this.get('valueBinding._from');\n        if (path) {\n          path = path.split(\".\");\n          return path[path.length - 1];\n        }\n      } else {\n        return this.get('labelCache');\n      }\n    } else {\n      this.set('labelCache', value);\n      return value;\n    }\n  }).property(),\n\n  labelView: Ember.View.extend({\n    tagName: 'label',\n    classNames: ['control-label'],\n    template: Ember.Handlebars.compile('{{view.value}}'),\n\n    value: Ember.computed(function(key, value) {\n      var parent = this.get('parentView');\n\n      if (value && value !== parent.get('label')) {\n        parent.set('label', value);\n      } else {\n        value = parent.get('label');\n      }\n\n      // If the labelCache property is present on parent, then the\n      // label was set manually, and there's no need to humanise it.\n      // Otherwise, it comes from the binding and needs to be\n      // humanised.\n      return parent.get('labelCache') === undefined || parent.get('labelCache') === false ?\n        Bootstrap.Forms.human(value) : value;\n    }).property('parentView.label'),\n\n    inputElementId: 'for',\n    forBinding: 'inputElementId',\n    attributeBindings: ['for']\n  }),\n\n  inputField: Ember.View.extend({\n    classNames: ['ember-bootstrap-extend'],\n    tagName: 'div',\n    template: Ember.Handlebars.compile('This class is not meant to be used directly, but extended.')\n  }),\n\n  errorsView: Ember.View.extend({\n    tagName: 'div',\n    classNames: ['errors', 'help-inline'],\n\n    _updateContent: Ember.observer(function() {\n      var parent = this.get('parentView');\n\n      if (parent !== null) {\n        var binding = parent.get('valueBinding._from');\n        var fieldName = null;\n        var object = null;\n\n        if (binding) {\n          binding = binding.replace(\"_parentView.\", \"\").split(\".\");\n          fieldName = binding[binding.length - 1];\n          object = parent.get(binding.slice(0, binding.length-1).join('.'));\n        } else {\n          fieldName = parent.get('label');\n          object = parent.get('context');\n        }\n\n        if (object && !object.get('isValid')) {\n          var errors = object.get('errors');\n\n          if (errors && fieldName in errors && !Ember.isEmpty(errors[fieldName])) {\n            parent.$().addClass('error');\n            this.$().html(errors[fieldName].join(', '));\n          } else {\n            parent.$().removeClass('error');\n            this.$().html('');\n          }\n        } else {\n          parent.$().removeClass('error');\n          this.$().html('');\n        }\n      }\n    }, 'parentView.context.isValid', 'parentView.label')\n  }),\n\n  helpView: Ember.View.extend({\n    tagName: 'div',\n    classNames: ['help-block'],\n    template: Ember.Handlebars.compile('{{view.content}}'),\n    contentBinding: 'parentView.help'\n  }),\n\n  didInsertElement: function() {\n    this.set('labelView.inputElementId', this.get('inputField.elementId'));\n  }\n});\n\n})();\n//@ sourceURL=ember-bootstrap/forms/field");minispade.register('ember-bootstrap/forms/select', "(function() {var Bootstrap = window.Bootstrap;\n\nBootstrap.Forms.Select = Bootstrap.Forms.Field.extend({\n  optionLabelPath: 'content',\n  optionValuePath: 'content',\n\n  inputField: Ember.Select.extend({\n    contentBinding:         'parentView.content',\n\n    optionLabelPathBinding: 'parentView.optionLabelPath',\n    optionValuePathBinding: 'parentView.optionValuePath',\n\n    valueBinding:           'parentView.value',\n    selectionBinding:       'parentView.selection',\n    promptBinding:          'parentView.prompt',\n    multipleBinding:        'parentView.multiple',\n    disabledBinding:        'parentView.disabled',\n    classNameBindings:      ['parentView.inputClassNames'],\n    name: Ember.computed(function() {\n      return this.get('parentView.name') || this.get('parentView.label');\n    }).property('parentView.name', 'parentView.label')    \n  })\n});\n\n})();\n//@ sourceURL=ember-bootstrap/forms/select");minispade.register('ember-bootstrap/forms/text_area', "(function() {minispade.require(\"ember-bootstrap/mixins/text_support\");\n\nvar Bootstrap = window.Bootstrap;\nBootstrap.Forms.TextArea = Bootstrap.Forms.Field.extend({\n\n  inputField: Ember.TextArea.extend(Bootstrap.TextSupport, {\n    rowsBinding: 'parentView.rows',\n    colsBinding: 'parentView.cols' \n  })\n});\n\n})();\n//@ sourceURL=ember-bootstrap/forms/text_area");minispade.register('ember-bootstrap/forms/text_field', "(function() {minispade.require(\"ember-bootstrap/mixins/text_support\");\n\nvar Bootstrap = window.Bootstrap;\nBootstrap.Forms.TextField = Bootstrap.Forms.Field.extend({\n  type: 'text',\n\n  inputField: Ember.TextField.extend(Bootstrap.TextSupport, {\n    typeBinding: 'parentView.type',\n    sizeBinding: 'parentView.size'\n  })\n});\n\n})();\n//@ sourceURL=ember-bootstrap/forms/text_field");minispade.register('ember-bootstrap/forms/uneditable_input', "(function() {var Bootstrap = window.Bootstrap;\nBootstrap.Forms.UneditableInput = Bootstrap.Forms.Field.extend({\n\n  inputField: Ember.View.extend({\n    tagName: 'span',\n    classNames: ['uneditable-input'],\n    attributeBindings: ['name'],\n    template: Ember.Handlebars.compile('{{view.value}}'),\n\n    valueBinding:   'parentView.value',\n    classNameBindings: ['parentView.inputClassNames'],\n    name: Ember.computed(function() {\n      return this.get('parentView.name') || this.get('parentView.label');\n    }).property('parentView.name', 'parentView.label')\n  })\n});\n})();\n//@ sourceURL=ember-bootstrap/forms/uneditable_input");minispade.register('ember-bootstrap', "(function() {minispade.require(\"ember-bootstrap/core\");\nminispade.require(\"ember-bootstrap/views/modal_pane\");\nminispade.require(\"ember-bootstrap/views/alert_message\");\nminispade.require(\"ember-bootstrap/views/block_alert_message\");\nminispade.require(\"ember-bootstrap/views/pill_item\");\nminispade.require(\"ember-bootstrap/views/pills\");\nminispade.require(\"ember-bootstrap/views/tabs\");\nminispade.require(\"ember-bootstrap/views/nav_list\");\nminispade.require(\"ember-bootstrap/views/progress_bar\");\nminispade.require(\"ember-bootstrap/views/badge\");\nminispade.require(\"ember-bootstrap/views/label\");\nminispade.require(\"ember-bootstrap/views/well\");\nminispade.require(\"ember-bootstrap/views/pagination\");\nminispade.require(\"ember-bootstrap/views/pager\");\nminispade.require(\"ember-bootstrap/views/breadcrumb\");\nminispade.require(\"ember-bootstrap/forms\");\nminispade.require(\"ember-bootstrap/forms/field\");\nminispade.require(\"ember-bootstrap/forms/select\");\nminispade.require(\"ember-bootstrap/forms/text_area\");\nminispade.require(\"ember-bootstrap/forms/text_field\");\nminispade.require(\"ember-bootstrap/forms/checkbox\");\nminispade.require(\"ember-bootstrap/forms/uneditable_input\");\n\n})();\n//@ sourceURL=ember-bootstrap");minispade.register('ember-bootstrap/mixins/first_last_view_support', "(function() {var get = Ember.get;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.FirstLastViewSupport = Ember.Mixin.create({\n  createChildView: function(view, attrs) {\n    var content;\n\n    if (attrs) {\n      content = get(this, 'content');\n\n      if (attrs.contentIndex === 0) {\n        view = get(this, 'firstItemViewClass') || view;\n      }\n      if (attrs.contentIndex === (get(content, 'length') - 1)) {\n        view = get(this, 'lastItemViewClass') || view;\n      }\n    }\n    return this._super(view, attrs);\n  }\n});\n\n})();\n//@ sourceURL=ember-bootstrap/mixins/first_last_view_support");minispade.register('ember-bootstrap/mixins/item_selection_support', "(function() {minispade.require(\"ember-bootstrap/mixins/item_view_value_support\");\nminispade.require(\"ember-bootstrap/mixins/item_view_title_support\");\n\nvar get = Ember.get, set = Ember.set;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.ItemSelectionSupport = Ember.Mixin.create(Bootstrap.ItemViewValueSupport, Bootstrap.ItemViewTitleSupport, {\n  classNameBindings: [\"isActive:active\"],\n  allowsEmptySelection: false,\n\n  isActive: Ember.computed(function() {\n    var parentView = get(this, 'parentView'),\n    selection, value;\n    if (!parentView) return false;\n    selection = get(parentView, 'selection');\n    value = get(this, 'value');\n    return selection === value;\n  }).property('parentView.selection', 'value').cacheable(),\n\n  click: function(event) {\n    var value = get(this, 'value'),\n    parentView = get(this, 'parentView'),\n    allowsEmptySelection = get(parentView, 'allowsEmptySelection'),\n    selection = get(parentView, 'selection');\n    if (allowsEmptySelection === true && selection === value) {\n      value = null;\n    }\n    set(parentView, 'selection', value);\n    return true;\n  }\n});\n\n})();\n//@ sourceURL=ember-bootstrap/mixins/item_selection_support");minispade.register('ember-bootstrap/mixins/item_view_href_support', "(function() {var get = Ember.get;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.ItemViewHrefSupport = Ember.Mixin.create({\n  href: Ember.computed(function() {\n    var parentView = get(this, 'parentView'),\n        content, hrefKey;\n    content = get(this, 'content');\n    if (parentView) {\n      hrefKey = get(parentView, 'itemHrefKey') || 'link';\n      return get(content, hrefKey) || '#';\n    }\n    return content;\n  }).property('content').cacheable()\n});\n\n})();\n//@ sourceURL=ember-bootstrap/mixins/item_view_href_support");minispade.register('ember-bootstrap/mixins/item_view_title_support', "(function() {var get = Ember.get, \n    Bootstrap = window.Bootstrap;\n\nBootstrap.ItemViewTitleSupport = Ember.Mixin.create({\n  title: Ember.computed(function() {\n    var parentView = get(this, 'parentView'),\n        content, \n        titleKey;\n\n    content = get(this, 'content');\n    if (parentView) {\n      titleKey = get(parentView, 'itemTitleKey') || 'title';\n\n      return get(content, titleKey) || content;\n    }\n\n    return content;\n  }).property('content').cacheable()\n});\n\n})();\n//@ sourceURL=ember-bootstrap/mixins/item_view_title_support");minispade.register('ember-bootstrap/mixins/item_view_value_support', "(function() {var get = Ember.get;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.ItemViewValueSupport = Ember.Mixin.create({\n  value: Ember.computed(function() {\n    var parentView = get(this, 'parentView'),\n        content, valueKey;\n    if (!parentView) return null;\n    content = get(this, 'content');\n    valueKey = get(parentView, 'itemValueKey') || 'value';\n    return get(content, valueKey) || content;\n  }).property('content').cacheable()\n});\n\n})();\n//@ sourceURL=ember-bootstrap/mixins/item_view_value_support");minispade.register('ember-bootstrap/mixins/size_support', "(function() {var get = Ember.get;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.SizeSupport = Ember.Mixin.create({\n  baseClassName: Ember.required(String),\n  classNameBindings: ['sizeClass'],\n  size: null, // mini, small || large\n  sizeClass: Ember.computed(function() {\n    var size = get(this, 'size'),\n        baseClassName = get(this, 'baseClassName');\n    return size ? baseClassName + '-' + size : null;\n  }).property('size').cacheable()\n});\n\n})();\n//@ sourceURL=ember-bootstrap/mixins/size_support");minispade.register('ember-bootstrap/mixins/text_support', "(function() {var get = Ember.get;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.TextSupport = Ember.Mixin.create({\n  valueBinding: 'parentView.value',\n  placeholderBinding: 'parentView.placeholder',\n  disabledBinding: 'parentView.disabled',\n  maxlengthBinding: 'parentView.maxlength',\n  classNameBindings: 'parentView.inputClassNames',\n  attributeBindings: ['name'],\n  name: Ember.computed(function() {\n    return get(this, 'parentView.name') || get(this, 'parentView.label');\n  }).property('parentView.name', 'parentView.label').cacheable()\n});\n\n})();\n//@ sourceURL=ember-bootstrap/mixins/text_support");minispade.register('ember-bootstrap/mixins/type_support', "(function() {var get = Ember.get, set = Ember.set;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.TypeSupport = Ember.Mixin.create({\n  baseClassName: Ember.required(String),\n  classNameBindings: ['typeClass'],\n  type: null, // success, warning, error, info || inverse\n  typeClass: Ember.computed(function() {\n    var type = get(this, 'type'),\n        baseClassName = get(this, 'baseClassName');\n    return type ? baseClassName + '-' + type : null;\n  }).property('type').cacheable()\n});\n\n})();\n//@ sourceURL=ember-bootstrap/mixins/type_support");minispade.register('ember-bootstrap/views/alert_message', "(function() {minispade.require(\"ember-bootstrap/mixins/type_support\");\n\nvar get = Ember.get;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.AlertMessage = Ember.View.extend(Bootstrap.TypeSupport, {\n  classNames: ['alert', 'alert-message'],\n  baseClassName: 'alert',\n  template: Ember.Handlebars.compile('<a class=\"close\" rel=\"close\" href=\"#\">&times;</a>{{{view.message}}}'),\n  message: null,\n  removeAfter: null,\n\n  didInsertElement: function() {\n    var removeAfter = get(this, 'removeAfter');\n    if (removeAfter > 0) {\n      Ember.run.later(this, 'destroy', removeAfter);\n    }\n  },\n\n  click: function(event) {\n    var target = event.target,\n        targetRel = target.getAttribute('rel');\n\n    if (targetRel === 'close') {\n      this.destroy();\n      return false;\n    }\n  }\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/alert_message");minispade.register('ember-bootstrap/views/badge', "(function() {minispade.require('ember-bootstrap/mixins/type_support');\n\nvar Bootstrap = window.Bootstrap;\nBootstrap.Badge = Ember.View.extend(Bootstrap.TypeSupport, {\n  tagName: 'span',\n  classNames: ['badge'],\n  baseClassName: 'badge',\n  template: Ember.Handlebars.compile('{{view.content}}')\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/badge");minispade.register('ember-bootstrap/views/block_alert_message', "(function() {var Bootstrap = window.Bootstrap;\n\nBootstrap.BlockAlertMessage = Bootstrap.AlertMessage.extend({\n  classNames: ['alert', 'alert-block']\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/block_alert_message");minispade.register('ember-bootstrap/views/breadcrumb', "(function() {minispade.require('ember-bootstrap/mixins/item_view_title_support');\nminispade.require('ember-bootstrap/mixins/first_last_view_support');\n\nvar get = Ember.get;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.Breadcrumb = Ember.CollectionView.extend(Bootstrap.FirstLastViewSupport, {\n  tagName: 'ul',\n  classNames: ['breadcrumb'],\n  divider: '/',\n  arrayDidChange: function(content, start, removed, added) {\n    var view, \n        index, \n        length,\n        item,\n        lastItemViewClass = get(this, 'lastItemViewClass'),\n        itemViewClass = get(this, 'itemViewClass'),\n        lastView;\n\n    this._super.apply(this, arguments);\n\n    if (!content)\n      return;\n\n    length = get(content, 'length');\n\n    if (removed) {\n      lastView = get(this, 'childViews.lastObject');\n\n      if (lastItemViewClass.detectInstance(lastView))\n        return;\n\n      index = length - 1;\n\n      view = this.createChildView(lastItemViewClass, {\n        content: content[index],\n        contentIndex: index\n      });\n\n      this.replace(index, 1, [view]);\n    }\n\n    if (added) {\n      get(this, 'childViews').forEach(function(childView, index) {\n        if (lastItemViewClass.detectInstance(childView) && index !== length - 1) {\n          view = this.createChildView(itemViewClass, {\n            content: content[index],\n            contentIndex: index\n          });\n\n          this.replace(index, 1, [view]);\n        }\n      }, this);\n\n    }\n\n  },\n  itemViewClass: Ember.View.extend(Bootstrap.ItemViewTitleSupport, {\n    template: Ember.Handlebars.compile('<a href=\"#\">{{view.title}}</a><span class=\"divider\">{{view.parentView.divider}}</span>')\n  }),\n  lastItemViewClass: Ember.View.extend(Bootstrap.ItemViewTitleSupport, {\n    classNames: ['active'],\n    template: Ember.Handlebars.compile('{{view.title}}')\n  })\n});\n\n// 1 2 3 \n// 1 2 3 4 5 6\n// [] 3 0 3\n\n// 1 2 3 \n// 1 2 3 4\n// [] 3 0 1\n\n\n\n\n\n})();\n//@ sourceURL=ember-bootstrap/views/breadcrumb");minispade.register('ember-bootstrap/views/label', "(function() {minispade.require('ember-bootstrap/mixins/type_support');\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.Label = Ember.View.extend(Bootstrap.TypeSupport, {\n  tagName: 'span',\n  classNames: ['label'],\n  baseClassName: 'label',\n  template: Ember.Handlebars.compile('{{view.content}}')\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/label");minispade.register('ember-bootstrap/views/modal_pane', "(function() {var get = Ember.get;\nvar Bootstrap = window.Bootstrap;\nvar jQuery = window.jQuery;\n\nvar modalPaneTemplate = [\n'<div class=\"modal-header\">',\n'  <a href=\"#\" class=\"close\" rel=\"close\">&times;</a>',\n'  {{view view.headerViewClass}}',\n'</div>',\n'<div class=\"modal-body\">{{view view.bodyViewClass}}</div>',\n'<div class=\"modal-footer\">',\n'  {{view view.footerViewClass}}',\n'</div>'].join(\"\\n\");\n\nvar footerTemplate = [\n'{{#if view.parentView.secondary}}<a href=\"#\" class=\"btn btn-secondary\" rel=\"secondary\">{{view.parentView.secondary}}</a>{{/if}}',\n'{{#if view.parentView.primary}}<a href=\"#\" class=\"btn btn-primary\" rel=\"primary\">{{view.parentView.primary}}</a>{{/if}}'].join(\"\\n\");\n\nvar modalPaneBackdrop = '<div class=\"modal-backdrop\"></div>';\n\nBootstrap.ModalPane = Ember.View.extend({\n  classNames: 'modal',\n  defaultTemplate: Ember.Handlebars.compile(modalPaneTemplate),\n  heading: null,\n  message: null,\n  primary: null,\n  secondary: null,\n  showBackdrop: true,\n  headerViewClass: Ember.View.extend({\n    tagName: 'h3',\n    template: Ember.Handlebars.compile('{{view.parentView.heading}}')\n  }),\n  bodyViewClass: Ember.View.extend({\n    tagName: 'p',\n    template: Ember.Handlebars.compile('{{{view.parentView.message}}}')\n  }),\n  footerViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(footerTemplate)\n  }),\n\n  didInsertElement: function() {\n    if (get(this, 'showBackdrop')) this._appendBackdrop();\n    this._setupDocumentKeyHandler();\n  },\n\n  willDestroyElement: function() {\n    if (this._backdrop) this._backdrop.remove();\n    this._removeDocumentKeyHandler();\n  },\n\n  keyPress: function(event) {\n    if (event.keyCode === 27) {\n      this._triggerCallbackAndDestroy({ close: true }, event);\n    }\n  },\n\n  click: function(event) {\n    var target = event.target,\n        targetRel = target.getAttribute('rel');\n\n    if (targetRel === 'close') {\n      this._triggerCallbackAndDestroy({ close: true }, event);\n      return false;\n\n    } else if (targetRel === 'primary') {\n      this._triggerCallbackAndDestroy({ primary: true }, event);\n      return false;\n\n    } else if (targetRel === 'secondary') {\n      this._triggerCallbackAndDestroy({ secondary: true }, event);\n      return false;\n    }\n  },\n\n  _appendBackdrop: function() {\n    var parentLayer = this.$().parent();\n    this._backdrop = jQuery(modalPaneBackdrop).appendTo(parentLayer);\n  },\n\n  _setupDocumentKeyHandler: function() {\n    var cc = this,\n        handler = function(event) {\n          cc.keyPress(event);\n        };\n    jQuery(window.document).bind('keyup', handler);\n    this._keyUpHandler = handler;\n  },\n\n  _removeDocumentKeyHandler: function() {\n    jQuery(window.document).unbind('keyup', this._keyUpHandler);\n  },\n\n  _triggerCallbackAndDestroy: function(options, event) {\n    var destroy;\n    if (this.callback) {\n      destroy = this.callback(options, event);\n    }\n    if (destroy === undefined || destroy) this.destroy();\n  }\n});\n\nBootstrap.ModalPane.reopenClass({\n  rootElement: \".ember-application\",\n  popup: function(options) {\n    var modalPane, rootElement;\n    if (!options) options = {};\n    modalPane = this.create(options);\n    rootElement = get(this, 'rootElement');\n    modalPane.appendTo(rootElement);\n    return modalPane;\n  }\n});\n\n\n})();\n//@ sourceURL=ember-bootstrap/views/modal_pane");minispade.register('ember-bootstrap/views/nav_list', "(function() {var Bootstrap = window.Bootstrap;\nBootstrap.NavList = Ember.CollectionView.extend({\n  classNames: ['nav', 'nav-list'],\n  tagName: 'ul',\n  itemViewClass: Bootstrap.PillItem,\n  selection: null\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/nav_list");minispade.register('ember-bootstrap/views/pager', "(function() {minispade.require('ember-bootstrap/mixins/item_view_title_support');\nminispade.require('ember-bootstrap/mixins/item_view_href_support');\n\nvar Bootstrap = window.Bootstrap;\nBootstrap.Pager = Ember.CollectionView.extend({\n  tagName: 'ul',\n  classNames: ['pager'],\n  itemTitleKey: 'title',\n  itemHrefKey: 'href',\n  init: function() {\n    this._super();\n    if (!this.get('content')) {\n      this.set('content', Ember.A([\n                                  Ember.Object.create({ title: '&larr;' }), \n                                  Ember.Object.create({ title: '&rarr;' })\n      ]));\n    }\n  },\n  itemViewClass: Ember.View.extend(Bootstrap.ItemViewTitleSupport, Bootstrap.ItemViewHrefSupport, {\n    classNameBindings: ['content.next', 'content.previous', 'content.disabled'],\n    template: Ember.Handlebars.compile('<a {{bindAttr href=\"view.href\"}}>{{{view.title}}}</a>')\n  }),\n  arrayDidChange: function(content, start, removed, added) {\n    if (content) {\n      Ember.assert('content must always has at the most 2 elements', content.get('length') <= 2);\n    }\n    return this._super(content, start, removed, added);\n  }\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/pager");minispade.register('ember-bootstrap/views/pagination', "(function() {minispade.require('ember-bootstrap/mixins/item_selection_support');\nminispade.require('ember-bootstrap/mixins/item_view_href_support');\n\nvar get = Ember.get, set = Ember.set, A = Ember.A;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.Pagination = Ember.CollectionView.extend({\n  tagName: 'ul',\n  classNames: ['pagination'],\n  itemTitleKey: 'title',\n  itemHrefKey: 'href',\n  init: function() {\n    this._super();\n    if (!this.get('content')) {\n      this.set('content', new A([]));\n    }\n  },\n  itemViewClass: Ember.View.extend(Bootstrap.ItemSelectionSupport, Bootstrap.ItemViewHrefSupport, {\n    classNameBindings: ['content.disabled'],\n    template: Ember.Handlebars.compile('<a {{bindAttr href=\"view.href\"}}>{{view.title}}</a>')\n  })\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/pagination");minispade.register('ember-bootstrap/views/pill_item', "(function() {minispade.require('ember-bootstrap/mixins/item_selection_support');\nminispade.require('ember-bootstrap/mixins/item_view_href_support');\n\nvar Bootstrap = window.Bootstrap;\nBootstrap.PillItem = Ember.View.extend(Bootstrap.ItemSelectionSupport, Bootstrap.ItemViewHrefSupport, {\n  template: Ember.Handlebars.compile('{{view view.item}}'),\n\n  item: Ember.View.extend({\n    tagName: 'a',\n    template: Ember.Handlebars.compile('{{view.parentView.title}}'),\n    attributeBindings: ['href'],\n    hrefBinding: 'parentView.href'\n  })\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/pill_item");minispade.register('ember-bootstrap/views/pills', "(function() {var Bootstrap = window.Bootstrap;\nBootstrap.Pills = Ember.CollectionView.extend({\n  classNames: ['nav', 'nav-pills'],\n  classNameBindings: ['isStacked:nav-stacked'],\n  tagName: 'ul',\n  itemViewClass: Bootstrap.PillItem,\n  selection: null\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/pills");minispade.register('ember-bootstrap/views/progress_bar', "(function() {var get = Ember.get;\nvar fmt = Ember.String.fmt;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.ProgressBar = Ember.View.extend({\n  classNames: ['progress'],\n  classNameBindings: ['isStriped:progress-striped', 'isAnimated:active'],\n  template: Ember.Handlebars.compile('<div class=\"bar\" {{bindAttr style=\"view.style\"}}></div>'),\n  isAnimated: false,\n  isStriped: false,\n  progress: 0,\n\n  style: Ember.computed(function() {\n    var progress = get(this, 'progress');\n    \n    return fmt('width:%@%;', [progress]);\n  }).property('progress').cacheable()\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/progress_bar");minispade.register('ember-bootstrap/views/tabs', "(function() {var Bootstrap = window.Bootstrap;\nBootstrap.Tabs = Ember.CollectionView.extend({\n  classNames: ['nav', 'nav-tabs'],\n  classNameBindings: ['isStacked:nav-stacked'],\n  tagName: 'ul',\n  itemViewClass: Bootstrap.PillItem,\n  selection: null\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/tabs");minispade.register('ember-bootstrap/views/well', "(function() {var get = Ember.get;\nvar Bootstrap = window.Bootstrap;\n\nBootstrap.Well = Ember.View.extend({\n  template: Ember.Handlebars.compile('{{view.content}}'),\n  classNames: 'well',\n  content: null\n});\n\n})();\n//@ sourceURL=ember-bootstrap/views/well");