var JSHINTRC = {
  predef: [
    "console",
    "requireModule",
    "Ember",
    "Handlebars",
    "Bootstrap",
    "Metamorph",
    "ember_assert",
    "ember_warn",
    "ember_deprecate",
    "ember_deprecateFunc",
    "require",
    "equal",
    "notEqual",
    "asyncTest",
    "test",
    "raises",
    "deepEqual",
    "start",
    "stop",
    "ok",
    "strictEqual",
    "module",
    "expect",
    "minispade",
    "async",
    "invokeAsync",
    "jQuery",
    "expectAssertion",

    "clickRelLink",
    "appendIntoDOM",
    "isAppendedToDOM",
    "isDestroyed",
    "documentHasSelector",
    "destroyIfNecessary"
  ],
  node: false,
  es5: true,
  browser: true,
  boss: true,
  curly: false,
  debug: false,
  devel: false,
  eqeqeq: true,
  evil: true,
  forin: false,
  immed: false,
  laxbreak: false,
  newcap: true,
  noarg: true,
  noempty: false,
  nonew: false,
  nomen: false,
  onevar: false,
  plusplus: false,
  regexp: false,
  undef: true,
  sub: true,
  strict: false,
  white: false,
  eqnull: true
}
;

minispade.register('ember-bootstrap/~tests/forms/controls/checkbox_test', "(function() {var object, field;\n\nmodule(\"Bootstrap.Forms.Checkbox\", {\n  setup: function() {\n    object = Ember.Object.create({\n      name: null\n    });\n    field = Bootstrap.Forms.Checkbox.create({\n      context: object\n    });\n  },\n\n  teardown: function() {\n    destroyIfNecessary(field);\n  }\n});\n\nfunction append() {\n  Ember.run(function() {\n    field.appendTo('#qunit-fixture');\n  });\n}\n\n\ntest(\"should have the field\", function() {\n  append();\n  equal(field.$().find('input[type=checkbox]').length, 1, \"It needs to include the text field\");\n});\n\ntest(\"checkbox is updated when setting value property of view\", function() {\n  Ember.run(function() {\n    field.set('checked', true);\n    field.append();\n  });\n  var checkboxField = field.$().find('input[type=checkbox]');\n\n  equal(checkboxField[0].checked, true, \"renders checkbox field checked\");\n\n  Ember.run(function() { field.set('checked', false); });\n\n  equal(checkboxField[0].checked, false, \"updates checkbox after value changes\");\n});\n\ntest(\"input attributes can be set\", function() {\n  Ember.run(function() {\n    field.set('disabled', true);\n    field.append();\n  });\n  var checkboxField = field.$().find('input[type=checkbox]');\n  equal(checkboxField.prop('disabled'), true, \"sets disabled from parent\");\n});\n\ntest(\"input name can be set from name or label\", function() {\n  Ember.run(function() {\n    field.set('label', 'First Name');\n    field.append();\n  });\n  var checkboxField = field.$().find('input[type=checkbox]');\n  equal(checkboxField.attr('name'), \"First Name\", \"sets name from label\");\n\n  Ember.run(function() { field.set('label', 'first_name'); });\n\n  equal(checkboxField.attr('name'), \"first_name\", \"sets name from parent if available\");\n});\n\ntest(\"inputClasses can be set from parent\", function() {\n  Ember.run(function() {\n    field.set('inputClassNames', ['input-small']);\n    field.append();\n  });\n  var checkboxField = field.$().find('input[type=checkbox]');\n  equal(checkboxField.hasClass(\"input-small\"), true, \"sets classes on input\");\n});\n\ntest(\"should have the label for attribtue\", function() {\n  append();\n\n  var checkboxField = field.$().find('input[type=checkbox]');\n  equal(field.$().find('label').attr('for'), checkboxField.attr('id'), \"the label for attribute should be the id of the input field\");\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/forms/controls/checkbox_test");minispade.register('ember-bootstrap/~tests/forms/controls/select_test', "(function() {var field, content;\n\nmodule(\"Bootstrap.Forms.Select\", {\n  setup: function() {\n    content = Ember.A([\n      Ember.Object.create({firstName: \"John\", id: 1}),\n      Ember.Object.create({firstName: \"Jane\", id: 2})\n    ]);\n    field = Bootstrap.Forms.Select.create({\n      content: content,\n      optionLabelPath: \"content.firstName\",\n      optionValuePath: \"content.id\"\n    });\n\n  },\n\n  teardown: function() {\n    destroyIfNecessary(field);\n  }\n});\n\nfunction append() {\n  Ember.run(function() {\n    field.appendTo('#qunit-fixture');\n  });\n}\n\ntest(\"should have the field\", function() {\n  append();\n  equal(field.$().find('select').length, 1, \"It needs to include the text area\");\n});\n\ntest(\"select value is updated when setting selection property of view\", function() {\n  Ember.run(function() {\n    field.append();\n  });\n  var select = field.$().find('select');\n\n  equal(select.val(), \"1\", \"renders select with value\");\n  equal(select.find('option:selected').text(), \"John\", \"renders select with label\");\n\n  Ember.run(function() { field.set('selection', content.objectAt(1)); });\n\n  equal(select.val(), \"2\", \"updates select field after value changes\");\n  equal(select.find('option:selected').text(), \"Jane\", \"updates select field after label changes\");\n});\n\ntest(\"select value is updated when setting value property of view\", function() {\n  Ember.run(function() {\n    field.append();\n  });\n  var select = field.$().find('select');\n\n  equal(select.val(), \"1\", \"renders select with value\");\n  equal(select.find('option:selected').text(), \"John\", \"renders select with label\");\n\n  Ember.run(function() { field.set('value', 2); });\n\n  equal(select.val(), \"2\", \"updates select field after value changes\");\n  equal(select.find('option:selected').text(), \"Jane\", \"updates select field after label changes\");\n});\n\ntest(\"should have the multiple\", function() {\n  Ember.run(function() {\n    field.append();\n  });\n  var select = field.$().find('select');\n\n  equal(select.attr('multiple'), null, \"the select is not multiple\");\n\n  field.set('multiple', true);\n  equal(select.attr('multiple'), 'multiple', \"the select is multiple\");\n});\n\ntest(\"should have the prompt\", function() {\n  Ember.run(function() {\n    field.append();\n  });\n  var select = field.$().find('select');\n  field.set('prompt', 'Select Me');\n  equal(select.find('option:eq(0)').text(), \"Select Me\", \"the select has a prompt\");\n});\n\ntest(\"input name can be set from name or label\", function() {\n  Ember.run(function() {\n    field.set('label', 'First Name');\n    field.append();\n  });\n  var select = field.$().find('select');\n  equal(select.attr('name'), \"First Name\", \"sets name from label\");\n\n  Ember.run(function() { field.set('label', 'first_name'); });\n\n  equal(select.attr('name'), \"first_name\", \"sets name from parent if available\");\n});\n\ntest(\"inputClasses can be set from parent\", function() {\n  Ember.run(function() {\n    field.set('inputClassNames', ['input-small']);\n    field.append();\n  });\n  var select = field.$().find('select');\n  equal(select.hasClass(\"input-small\"), true, \"sets classes on input\");\n});\n\ntest(\"should have the label for attribute\", function() {\n  append();\n\n  var select = field.$().find('select');\n  equal(field.$().find('label').attr('for'), select.attr('id'), \"the label for attribute should be the id of the select field\");\n});\n\ntest(\"should be disableable\", function() {\n\n  Ember.run(function() {\n    field.append();\n  });\n  field.set(\"disabled\", true);\n  var select = field.$().find('select');\n\n  equal(select.prop('disabled'), true, \"the select should be disabled\");\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/forms/controls/select_test");minispade.register('ember-bootstrap/~tests/forms/controls/text_area_test', "(function() {var field, object;\n\nmodule(\"Bootstrap.Forms.TextArea\", {\n  setup: function() {\n    object = Ember.Object.create({\n      name: null\n    });\n    field = Bootstrap.Forms.TextArea.create({\n      context: object\n    });\n  },\n\n  teardown: function() {\n    destroyIfNecessary(field);\n  }\n});\n\nfunction append() {\n  Ember.run(function() {\n    field.appendTo('#qunit-fixture');\n  });\n}\n\n\ntest(\"should have the field\", function() {\n  append();\n  equal(field.$().find('textarea').length, 1, \"It needs to include the text area\");\n});\n\ntest(\"input value is updated when setting value property of view\", function() {\n  Ember.run(function() {\n    field.set('value', 'foo');\n    field.append();\n  });\n  var textArea = field.$().find('textarea');\n\n  equal(textArea.val(), \"foo\", \"renders text field with value\");\n\n  Ember.run(function() { field.set('value', 'bar'); });\n\n  equal(textArea.val(), \"bar\", \"updates text field after value changes\");\n});\n\ntest(\"input cols and rows can be set\", function() {\n  Ember.run(function() {\n    field.set('cols', '60');\n    field.set('rows', '3');\n    field.append();\n  });\n  var textArea = field.$().find('textarea');\n  equal(textArea.attr('cols'), \"60\", \"sets cols attribute on textarea\");\n  equal(textArea.attr('rows'), \"3\", \"sets rows attribute on textarea\");\n});\n\ntest(\"should have the label for attribute\", function() {\n  append();\n\n  var textArea = field.$().find('textarea');\n  equal(field.$().find('label').attr('for'), textArea.attr('id'), \"the label for attribute should be the id of the text area field\");\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/forms/controls/text_area_test");minispade.register('ember-bootstrap/~tests/forms/controls/text_field_test', "(function() {var object, field;\n\nmodule(\"Bootstrap.Forms.TextField\", {\n  setup: function() {\n    object = Ember.Object.create({\n      name: null\n    });\n    field = Bootstrap.Forms.TextField.create({\n      context: object\n    });\n  },\n\n  teardown: function() {\n    destroyIfNecessary(field);\n  }\n});\n\nfunction append() {\n  Ember.run(function() {\n    field.appendTo('#qunit-fixture');\n  });\n}\n\n\ntest(\"should have the field\", function() {\n  append();\n  equal(field.$().find('input[type=text]').length, 1, \"It needs to include the text field\");\n});\n\ntest(\"input value is updated when setting value property of view\", function() {\n  Ember.run(function() {\n    field.set('value', 'foo');\n    field.append();\n  });\n  var textField = field.$().find('input[type=text]');\n\n  equal(textField.val(), \"foo\", \"renders text field with value\");\n\n  Ember.run(function() { field.set('value', 'bar'); });\n\n  equal(textField.val(), \"bar\", \"updates text field after value changes\");\n});\n\ntest(\"input type and size can be set\", function() {\n  Ember.run(function() {\n    field.set('type', 'number');\n    field.set('size', '60');\n    field.append();\n  });\n  var textField = field.$().find('input[type]');\n  equal(textField.attr('type'), \"number\", \"sets input type to number\");\n  equal(textField.attr('size'), \"60\", \"sets input size of input\");\n});\n\ntest(\"input  attributes can be set\", function() {\n  Ember.run(function() {\n    field.set('placeholder', \"First Name\");\n    field.set('disabled', true);\n    field.set('maxlength', '60');\n    field.append();\n  });\n  var textField = field.$().find('input[type=text]');\n  equal(textField.attr('placeholder'), \"First Name\", \"sets input placeholder from parent\");\n  equal(textField.prop('disabled'), true, \"sets disabled from parent\");\n  equal(textField.prop('maxlength'), 60, \"sets maxlength from parent\");\n});\n\ntest(\"input name can be set from name or label\", function() {\n  Ember.run(function() {\n    field.set('label', 'First Name');\n    field.append();\n  });\n  var textField = field.$().find('input[type=text]');\n  equal(textField.attr('name'), \"First Name\", \"sets name from label\");\n\n  Ember.run(function() { field.set('label', 'first_name'); });\n\n  equal(textField.attr('name'), \"first_name\", \"sets name from parent if available\");\n});\n\ntest(\"inputClasses can be set from parent\", function() {\n  Ember.run(function() {\n    field.set('inputClassNames', ['input-small']);\n    field.append();\n  });\n  var textField = field.$().find('input[type=text]');\n  equal(textField.hasClass(\"input-small\"), true, \"sets classes on input\");\n});\n\ntest(\"should have the label for attribtue\", function() {\n  append();\n\n  var textField = field.$().find('input[type=text]');\n  equal(field.$().find('label').attr('for'), textField.attr('id'), \"the label for attribute should be the id of the input field\");\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/forms/controls/text_field_test");minispade.register('ember-bootstrap/~tests/forms/controls/uneditable_input_test', "(function() {var object, field;\n\nmodule(\"Bootstrap.Forms.UneditableInput\", {\n  setup: function() {\n    object = Ember.Object.create({\n      name: null\n    });\n    field = Bootstrap.Forms.UneditableInput.create({\n      context: object\n    });\n  },\n\n  teardown: function() {\n    destroyIfNecessary(field);\n  }\n});\n\nfunction append() {\n  Ember.run(function() {\n    field.appendTo('#qunit-fixture');\n  });\n}\n\n\ntest(\"should have the field\", function() {\n  append();\n  equal(field.$().find('span.uneditable-input').length, 1, \"It needs to include the text field\");\n});\n\ntest(\"input value is updated when setting value property of view\", function() {\n  Ember.run(function() {\n    field.set('value', 'foo');\n    field.append();\n  });\n  var uneditableField = field.$().find('span.uneditable-input');\n\n  equal(uneditableField.text(), \"foo\", \"renders text field with value\");\n\n  Ember.run(function() { field.set('value', 'bar'); });\n\n  equal(uneditableField.text(), \"bar\", \"updates text field after value changes\");\n});\n\ntest(\"input name can be set from name or label\", function() {\n  Ember.run(function() {\n    field.set('label', 'First Name');\n    field.append();\n  });\n  var uneditableField = field.$().find('span.uneditable-input');\n  equal(uneditableField.attr('name'), \"First Name\", \"sets name from label\");\n\n  Ember.run(function() { field.set('label', 'first_name'); });\n\n  equal(uneditableField.attr('name'), \"first_name\", \"sets name from parent if available\");\n});\n\ntest(\"inputClasses can be set from parent\", function() {\n  Ember.run(function() {\n    field.set('inputClassNames', ['input-small']);\n    field.append();\n  });\n  var uneditableField = field.$().find('span.uneditable-input');\n  equal(uneditableField.hasClass(\"input-small\"), true, \"sets classes on input\");\n});\n\ntest(\"should have the label for attribtue\", function() {\n  append();\n\n  var uneditableField = field.$().find('span.uneditable-input');\n  equal(field.$().find('label').attr('for'), uneditableField.attr('id'), \"the label for attribute should be the id of the input field\");\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/forms/controls/uneditable_input_test");minispade.register('ember-bootstrap/~tests/forms/field_test', "(function() {var object, field;\n\nmodule(\"Bootstrap.Forms.Field\", {\n  setup: function() {\n    object = Ember.Object.create();\n    field = Bootstrap.Forms.Field.create({\n      context: object,\n      label: 'object'\n    });\n  },\n\n  teardown: function() {\n    destroyIfNecessary(field);\n  }\n});\n\nfunction append() {\n  Ember.run(function() {\n    field.appendTo('#qunit-fixture');\n  });\n}\n\ntest(\"should have the label\", function() {\n  append();\n  equal(field.$().find('label.control-label').length, 1, \"Every field needs to include a label\");\n});\n\ntest(\"should set the label value\", function() {\n  append();\n\n  Ember.run(function() { field.set('label', 'foo'); });\n  equal(field.$().find('label').text(), 'foo', \"the label value should be foo\");\n\n  Ember.run(function() { field.set('label', 'bar'); });\n  equal(field.$().find('label').text(), 'bar', \"the label value should be bar\");\n});\n\ntest(\"should have the label for attribute\", function() {\n  append();\n\n  equal(field.$().find('label').attr('for'), field.$().find('div.ember-bootstrap-extend').attr('id'), \"the label for attribute should be the id of the input field\");\n});\n\ntest(\"should use the valueBinding value as a default label\", function() {\n  destroyIfNecessary(field);\n  field = null;\n  object = Ember.Object.create({\n    foo: null\n  });\n  field = Bootstrap.Forms.Field.create({\n    context: object,\n    valueBinding: 'context.foo'\n  });\n  append();\n  equal(field.$().find('label').text(), 'Foo', \"the label value should be Foo (humanised)\");\n\n  Ember.run(function() { field.set('label', 'bar'); });\n  equal(field.$().find('label').text(), 'bar', \"the label value should be bar (not humanised)\");\n\n  Ember.run(function() { field.set('label', false); });\n  equal(field.$().find('label').text(), \"\", \"the field should not have a label when label='false'\");\n});\n\ntest(\"should have the controls\", function() {\n  append();\n  equal(field.$().find('div.controls').length, 1, \"Every field needs to include the controls\");\n});\n\n\ntest(\"should have the input\", function() {\n  append();\n  equal(field.$().find('div.ember-bootstrap-extend').html(), 'This class is not meant to be used directly, but extended.', \"Every field needs to include it's inputField\");\n});\n\ntest(\"should have the errors\", function() {\n  append();\n  equal(field.$().find('div.errors').length, 1, \"Every field needs to include the errors\");\n});\n\ntest(\"should display the label errors\", function() {\n  append();\n\n  object.set('errors', {object: [\"can't be null\"]});\n  object.set('isValid', false);\n  ok(field.$().hasClass('error'), \"the element should have the error tag\");\n  equal(field.$().find('.errors').text(), \"can't be null\", \"the error should be displayed\");\n\n  object.set('errors', null);\n  object.set('isValid', true);\n  ok(!field.$().hasClass('error'), \"the element should not have the error tag\");\n  equal(field.$().find('.errors').text(), \"\", \"no error should be display anymore\");\n});\n\ntest(\"should display the field errors\", function() {\n  destroyIfNecessary(field);\n  field = null;\n  object = Ember.Object.create({\n    foo: null\n  });\n  field = Bootstrap.Forms.Field.create({\n    context: object,\n    valueBinding: 'context.foo'\n  });\n  append();\n  object.set('errors', {foo: [\"can't be null\"]});\n  object.set('isValid', false);\n  ok(field.$().hasClass('error'), \"the element should have the error tag\");\n  equal(field.$().find('.errors').text(), \"can't be null\", \"the error should be displayed\");\n\n  object.set('errors', {foo: null});\n  object.set('isValid', true);\n  ok(!field.$().hasClass('error'), \"the element should have the error tag\");\n  equal(field.$().find('.errors').text(), \"\", \"no error should be display anymore\");\n  object.set('isValid', false);\n  ok(!field.$().hasClass('error'), \"the element should have the error tag\");\n  equal(field.$().find('.errors').text(), \"\", \"no error should be display anymore\");\n\n  object.set('errors', {foo: []});\n  object.set('isValid', true);\n  ok(!field.$().hasClass('error'), \"the element should not have the error tag\");\n  equal(field.$().find('.errors').text(), \"\", \"no error should be display anymore\");\n  object.set('isValid', false);\n  ok(!field.$().hasClass('error'), \"the element should not have the error tag\");\n  equal(field.$().find('.errors').text(), \"\", \"no error should be display anymore\");\n});\n\ntest(\"should display the nested object's field errors\", function() {\n  destroyIfNecessary(field);\n  field = null;\n  object = Ember.Object.create({\n    foo: null,\n    bar: Ember.Object.create({\n      buz: null\n    })\n  });\n  field = Bootstrap.Forms.Field.create({\n    context: object,\n    valueBinding: 'context.bar.buz'\n  });\n\n  append();\n  object.set('bar.errors', {buz: [\"can't be null\"]});\n  object.set('isValid', false);  // should listen on bar.isValid\n  ok(field.$().hasClass('error'), \"the element should have the error tag\");\n  equal(field.$().find('.errors').text(), \"can't be null\", \"the error should be displayed\");\n\n  object.set('bar.errors', null);\n  object.set('isValid', true);  // should listen on bar.isValid\n  ok(!field.$().hasClass('error'), \"the element should not have the error tag\");\n  equal(field.$().find('.errors').text(), \"\", \"no error should be display anymore\");\n});\n\n\n\ntest(\"should display the help\", function() {\n  append();\n\n  field.set('help', \"Where in the world are you?\");\n  equal(field.$().find('.help-block').text(), \"Where in the world are you?\", \"the help message should be displayed\");\n\n  field.set('help', null);\n  equal(field.$().find('.help-block').text(), \"\", \"the help message should not be displayed\");\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/forms/field_test");minispade.register('ember-bootstrap/~tests/forms_test', "(function() {module(\"Bootstrap\", {});\n\ntest(\"human\", function() {\n  equal(Bootstrap.Forms.human(), undefined,      \"should not fail with undefined\");\n  equal(Bootstrap.Forms.human(false), undefined, \"should swallow false values\");\n\n  equal(Bootstrap.Forms.human(\"hello there world\"), \"Hello There World\", \"should capitalize all the words\");\n  equal(Bootstrap.Forms.human(\"hello_there_world\"), \"Hello There World\", \"should replace _ with spaces\");\n  equal(Bootstrap.Forms.human(\"helloThereWorld\"), \"Hello There World\", \"should decamelize\");\n\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/forms_test");minispade.register('ember-bootstrap/~tests/views/alert_message_test', "(function() {var get = Ember.get, set = Ember.set;\nvar application, alert;\n\nmodule(\"Bootstrap.AlertMessage\", {\n  setup: function() {\n    application = Ember.Application.create();\n  },\n  teardown: function() {\n    Ember.run(function() {\n      destroyIfNecessary(alert);\n      destroyIfNecessary(application);\n    });\n  }\n});\n\ntest(\"an alert can be created and appended to DOM\", function() {\n  alert = Bootstrap.AlertMessage.create();\n  appendIntoDOM(alert);\n  ok(isAppendedToDOM(alert), 'an alert has a layer in the DOM');\n});\n\ntest(\"an alert binds type property to layer class\", function() {\n  var type = 'error';\n  alert = Bootstrap.AlertMessage.create({ type: type });\n  appendIntoDOM(alert);\n  ok(alert.$().hasClass('alert-error'), 'an alert binds type property to class');\n});\n\ntest(\"an alert binds message property to DOM\", function() {\n  var message;\n  alert = Bootstrap.AlertMessage.create();\n  Ember.run(function() {\n    alert.append();\n    message = 'oh my output';\n    alert.set('message', message);\n  });\n  equal(alert.$().text(), '×'+message, 'alert binds given message to DOM');\n});\n\ntest(\"an alert has a close button that removes it from the DOM\", function() {\n  var close;\n  alert = Bootstrap.AlertMessage.create();\n  appendIntoDOM(alert);\n  clickRelLink(alert, 'close');\n  ok(!isAppendedToDOM(alert), 'alert should not have a layer');\n  ok(isDestroyed(alert), 'alert should be destroyed');\n});\n\ntest(\"an alert removes itself from the DOM after given amount of time\", function() {\n  alert = Bootstrap.AlertMessage.create({\n    removeAfter: 25\n  });\n  Ember.run(function() {\n    alert.append();\n    setTimeout(function() {\n      start();\n      ok(!isAppendedToDOM(alert), 'alert should not have a layer');\n      ok(isDestroyed(alert), 'alert should be destroyed');\n    }, 50);\n  });\n  ok(isAppendedToDOM(alert), 'alert should not have been removed immediately');\n  ok(!isDestroyed(alert), 'alert should be destroyed immediately');\n  stop();\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/alert_message_test");minispade.register('ember-bootstrap/~tests/views/badge_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar badge;\n\nmodule(\"Bootstrap.Badge\", {\n  setup: function() {\n  },\n  teardown: function() {\n    Ember.run(function() {\n      destroyIfNecessary(badge);\n    });\n  }\n});\n\ntest(\"a badge can be created and appended to DOM\", function() {\n  badge = Bootstrap.Badge.create();\n  appendIntoDOM(badge);\n  ok(isAppendedToDOM(badge), 'a badge has a layer in the DOM');\n});\n\ntest(\"a badge binds badge class by default\", function() {\n  badge = Bootstrap.Badge.create();\n  appendIntoDOM(badge);\n  ok(badge.$().hasClass('badge'), 'a badge has badge class');\n});\n\ntest(\"a badge binds content to innerHTML div\", function() {\n  badge = Bootstrap.Badge.create({ content: 'it is a badge' });\n  appendIntoDOM(badge);\n  equal(badge.$().text(), 'it is a badge', 'a badge binds content in innerHTML');\n  Ember.run(function() {\n    badge.set('content', 'the badge changed');\n  });\n  equal(badge.$().text(), 'the badge changed', 'a badge binds content in innerHTML');\n});\n\ntest(\"a badge binds badge type class by default\", function() {\n  badge = Bootstrap.Badge.create({ type: 'success' });\n  appendIntoDOM(badge);\n  ok(badge.$().hasClass('badge-success'), 'a badge has badge-success class');\n  Ember.run(function() {\n    badge.set('type', 'success');\n  });\n  ok(badge.$().hasClass('badge-success'), 'a badge has badge-success class');\n  Ember.run(function() {\n    badge.set('type', 'warning');\n  });\n  ok(badge.$().hasClass('badge-warning'), 'a badge has badge-warning class');\n  Ember.run(function() {\n    badge.set('type', 'info');\n  });\n  ok(badge.$().hasClass('badge-info'), 'a badge has badge-info class');\n});\n\n\n\n\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/badge_test");minispade.register('ember-bootstrap/~tests/views/block_alert_message_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar blockAlert;\n\nmodule(\"Bootstrap.BlockAlertMessage\", {\n  setup: function() {},\n  teardown: function() {\n    destroyIfNecessary(blockAlert);\n  }\n});\n\ntest(\"a block alert message can be created and appended to DOM\", function() {\n  blockAlert = Bootstrap.BlockAlertMessage.create();\n  appendIntoDOM(blockAlert);\n  ok(isAppendedToDOM(blockAlert), 'a blockAlert pane has a layer in the DOM');\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/block_alert_message_test");minispade.register('ember-bootstrap/~tests/views/breadcrumb_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A, run = Ember.run;\nvar breadcrumb, single, many;\n\nmodule('Bootstrap.Breadcrumb', {\n  setup: function() {\n    single = Ember.A(['Home']);\n    many = Ember.A(['Home', 'Library', 'Data']);\n  },\n  teardown: function() {\n    destroyIfNecessary(breadcrumb);\n  }\n});\n\ntest('a breadcrumb can be created, appended to DOM and is styled', function() {\n  breadcrumb = Bootstrap.Breadcrumb.create();\n  appendIntoDOM(breadcrumb);\n  ok(isAppendedToDOM(breadcrumb), 'a breadcrumb has a layer in the DOM');\n\n  ok(breadcrumb.$().hasClass('breadcrumb'), 'a breadcrumb has class named breadcrumb');\n  run(function() {\n    set(breadcrumb, 'content', new A(single));\n  });\n  equal(breadcrumb.$().children().filter('.active').size(), 1, 'a non empty breadcrumb should have a children with the active class');\n\n});\n\ntest('a breadcrumb have children', function() {\n  breadcrumb = Bootstrap.Breadcrumb.create();\n  appendIntoDOM(breadcrumb);\n\n  equal(breadcrumb.$('li').size(), 0, 'the breadcrumb with a single element does have a child');\n\n  run(function() {\n    set(breadcrumb, 'content', single);\n  });\n  equal(breadcrumb.$('li').size(), 1, 'the breadcrumb with a single element does have a child');\n\n  run(function() {\n    set(breadcrumb, 'content', many);\n  });\n  equal(breadcrumb.$('li').size(), 3, 'the breadcrumb with 3 elements have 3 children');\n  equal(breadcrumb.$('a:first').text(), 'Home', 'the breadcrumb first item has text === Home and its and anchor');\n  equal(breadcrumb.$('li:last').text(), 'Data', 'the breadcrumb last item has text === Data and does not have an anchor');\n\n  run(function() {\n    get(breadcrumb, 'content').pushObject('Another');\n  });\n  equal(breadcrumb.$('li').size(), 4, 'the breadcrumb with 4 elements have 4 children');\n  equal(breadcrumb.$('a').size(), 3, 'the breadcrumb with 4 elements have 3 children with anchors');\n\n  run(function() {\n    get(breadcrumb, 'content').removeObject('Another');\n  });\n  equal(breadcrumb.$('li').size(), 3, 'the breadcrumb with 3 elements have 3 children');\n  equal(breadcrumb.$('a').size(), 2, 'the breadcrumb with 3 elements have 2 children with anchors');\n\n\n});\n\ntest('a breadcrumb have divider', function() {\n  breadcrumb = Bootstrap.Breadcrumb.create();\n  appendIntoDOM(breadcrumb);\n  equal(breadcrumb.get('divider'), '/', 'a breadcrumb has / as default divider (test for backward compatibility).');\n  breadcrumb.set('divider', '>');\n  equal(breadcrumb.get('divider'), '>', 'the breadcrumb divider has been changed to >');\n\n  run(function() {\n    set(breadcrumb, 'content', new A(single));\n  });\n  equal(breadcrumb.$('.divider').size(), 0, 'the breadcrumb with a single element does not have divider');\n\n  run(function() {\n    set(breadcrumb, 'content', new A(many));\n  });\n  equal(breadcrumb.$('.divider').size(), 2, 'the breadcrumb with 3 elements have 2 dividers');\n\n});\n\n\n\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/breadcrumb_test");minispade.register('ember-bootstrap/~tests/views/label_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar label;\n\nmodule(\"Bootstrap.Label\", {\n  setup: function() {\n  },\n  teardown: function() {\n    destroyIfNecessary(label);\n  }\n});\n\ntest(\"a label can be created and appended to DOM\", function() {\n  label = Bootstrap.Label.create();\n  appendIntoDOM(label);\n  ok(isAppendedToDOM(label), 'a label has a layer in the DOM');\n});\n\ntest(\"a label binds label class by default\", function() {\n  label = Bootstrap.Label.create();\n  appendIntoDOM(label);\n  ok(label.$().hasClass('label'), 'a label has label class');\n});\n\ntest(\"a label binds content to innerHTML div\", function() {\n  label = Bootstrap.Label.create({ content: 'it is a label' });\n  appendIntoDOM(label);\n  equal(label.$().text(), 'it is a label', 'a label binds content in innerHTML');\n  Ember.run(function() {\n    label.set('content', 'the label changed');\n  });\n  equal(label.$().text(), 'the label changed', 'a label binds content in innerHTML');\n});\n\ntest(\"a label binds label type class by default\", function() {\n  label = Bootstrap.Label.create({ type: 'success' });\n  appendIntoDOM(label);\n  ok(label.$().hasClass('label-success'), 'a label has label-success class');\n  Ember.run(function() {\n    label.set('type', 'success');\n  });\n  ok(label.$().hasClass('label-success'), 'a label has label-success class');\n  Ember.run(function() {\n    label.set('type', 'warning');\n  });\n  ok(label.$().hasClass('label-warning'), 'a label has label-warning class');\n  Ember.run(function() {\n    label.set('type', 'info');\n  });\n  ok(label.$().hasClass('label-info'), 'a label has label-info class');\n});\n\n\n\n\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/label_test");minispade.register('ember-bootstrap/~tests/views/modal_pane_test', "(function() {var get = Ember.get, set = Ember.set;\nvar application, modalPane;\n\nmodule(\"Bootstrap.ModalPane\", {\n  setup: function() {\n    application = Ember.Application.create();\n  },\n  teardown: function() {\n    destroyIfNecessary(modalPane);\n    destroyIfNecessary(application);\n  }\n});\n\ntest(\"a modal pane can be created and appended to DOM using popup() call\", function() {\n  Ember.run(function() {\n    modalPane = Bootstrap.ModalPane.popup();\n  });\n  ok(isAppendedToDOM(modalPane), 'a modal pane has a layer in the DOM');\n});\n\ntest(\"a modal pane is appended to the application using popup() call\", function() {\n  destroyIfNecessary(application);\n  var rootElement = Ember.$('<div id=\"app\" />').appendTo('#qunit-fixture');\n  application = Ember.Application.create({rootElement: \"#app\"});\n  Ember.run(function() {\n    modalPane = Bootstrap.ModalPane.popup();\n  });\n  ok((rootElement.find(modalPane.$()).length), 'a modal pane is appended to the application');\n});\n\ntest(\"a modal pane can be created and appended to DOM\", function() {\n  modalPane = Bootstrap.ModalPane.create();\n  appendIntoDOM(modalPane);\n  ok(isAppendedToDOM(modalPane), 'a modal pane has a layer in the DOM');\n});\n\ntest(\"a modal pane binds heading property to layer\", function() {\n  var heading = 'Oh my heading';\n  modalPane = Bootstrap.ModalPane.create({ heading: heading });\n  appendIntoDOM(modalPane);\n  equal(modalPane.$().find('.modal-header h3').text(), heading,\n        'a modal pane binds heading property modal pane header h3 tag');\n});\n\ntest(\"a modal pane binds message property to layer\", function() {\n  var message = 'Oh my message';\n  modalPane = Bootstrap.ModalPane.create({ message: message });\n  appendIntoDOM(modalPane);\n  equal(modalPane.$().find('.modal-body>p').text(), message,\n        'a modal pane binds message property to modal pane body');\n});\n\ntest(\"a modal pane shows primary button if primary property is present\", function() {\n  var primaryText = 'Oh my primary';\n  modalPane = Bootstrap.ModalPane.create({ primary: primaryText });\n  appendIntoDOM(modalPane);\n  ok(modalPane.$().find('.modal-footer a.btn-primary').length, 'a modal pane displays primary button');\n  equal(modalPane.$().find('.modal-footer a.btn-primary').text(), primaryText,\n        'a modal pane binds primary property to primary button text');\n\n  Ember.run(function() {\n    modalPane.set('primary', null);\n  });\n  ok(!modalPane.$().find('.modal-footer a.btn-primary').length, \"a modal pane hides primary button\");\n});\n\ntest(\"a modal pane shows secondary button if secondary property is present\", function() {\n  var secondaryText = 'Oh my secondary';\n  modalPane = Bootstrap.ModalPane.create({ secondary: secondaryText });\n  appendIntoDOM(modalPane);\n  ok(modalPane.$().find('.modal-footer a.btn-secondary').length, 'a modal pane displays secondary button');\n  equal(modalPane.$().find('.modal-footer a.btn-secondary').text(), secondaryText,\n        'a modal pane binds secondary property to secondary button text');\n\n  Ember.run(function() {\n    modalPane.set('secondary', null);\n  });\n  ok(!modalPane.$().find('.modal-footer a.btn-secondary').length, \"a modal pane hides secondary button\");\n});\n\ntest(\"a modal pane defines secondary button first so it sits to the left of the primary button if both are present\", function() {\n  var primaryText = 'Oh my primary',\n      secondaryText = 'Oh my secondary';\n  modalPane = Bootstrap.ModalPane.create({ primary: primaryText, secondary: secondaryText  });\n  appendIntoDOM(modalPane);\n  ok(modalPane.$().find('.modal-footer a.btn-secondary').next('a.btn-primary'), 'a modal pane defines secondary button first');\n});\n\ntest(\"a modal pane footerViewClass may be extended\", function() {\n  modalPane = Bootstrap.ModalPane.create({\n    footerViewClass: Ember.View.extend({\n      classNames: ['custom-footer'],\n      template: Ember.Handlebars.compile('custom footer')\n    })\n  });\n  appendIntoDOM(modalPane);\n  equal(modalPane.$().find('.modal-footer .custom-footer').text(), 'custom footer');\n});\n\ntest(\"a modal pane does not get removed by clicking inside it\", function() {\n  modalPane = Bootstrap.ModalPane.create();\n  appendIntoDOM(modalPane);\n  modalPane.$().click();\n  ok(isAppendedToDOM(modalPane), \"modal pane is still in the DOM\");\n});\n\ntest(\"a modal pane has a close button that removes it from the DOM\", function() {\n  var close;\n  modalPane = Bootstrap.ModalPane.create();\n  appendIntoDOM(modalPane);\n  clickRelLink(modalPane, 'close');\n  ok(!isAppendedToDOM(modalPane), \"modal pane is not in the DOM\");\n  ok(isDestroyed(modalPane), \"modal pane is destroyed\");\n});\n\ntest(\"a modal pane calls callback when close button clicked\", function() {\n  var callback = function() { callbackWasCalled = true; },\n      callbackWasCalled = false;\n  modalPane = Bootstrap.ModalPane.create({\n    callback: callback\n  });\n  appendIntoDOM(modalPane);\n  clickRelLink(modalPane, 'close');\n  ok(callbackWasCalled, \"modal pane calls given callback when close button clicked\");\n  ok(!isAppendedToDOM(modalPane), \"modal pane is not in the DOM\");\n  ok(isDestroyed(modalPane), \"modal pane is destroyed\");\n});\n\ntest(\"a modal pane calls callback when primary button clicked and removes pane from the DOM\", function() {\n  var callback = function() { callbackWasCalled = true; },\n      callbackWasCalled = false;\n  modalPane = Bootstrap.ModalPane.create({\n    primary: 'Primary button',\n    callback: callback\n  });\n  appendIntoDOM(modalPane);\n  clickRelLink(modalPane, 'primary');\n  ok(callbackWasCalled, \"modal pane calls given callback when primary button clicked\");\n  ok(!isAppendedToDOM(modalPane), \"modal pane is not in the DOM\");\n  ok(isDestroyed(modalPane), \"modal pane is destroyed\");\n});\n\ntest(\"a modal pane calls callback when primary button clicked which cancels removes pane from the DOM\", function() {\n  var callback = function() { callbackWasCalled = true; return false;},\n      callbackWasCalled = false;\n  modalPane = Bootstrap.ModalPane.create({\n    primary: 'Primary button',\n    callback: callback\n  });\n  appendIntoDOM(modalPane);\n  clickRelLink(modalPane, 'primary');\n  ok(callbackWasCalled, \"modal pane calls given callback when primary button clicked\");\n  ok(isAppendedToDOM(modalPane), \"modal pane is in the DOM\");\n  ok(!isDestroyed(modalPane), \"modal pane is not destroyed\");\n});\n\ntest(\"a modal pane calls callback when primary button clicked which explicitly removes pane from the DOM\", function() {\n  var callback = function() { callbackWasCalled = true; return true;},\n      callbackWasCalled = false;\n  modalPane = Bootstrap.ModalPane.create({\n    primary: 'Primary button',\n    callback: callback\n  });\n  appendIntoDOM(modalPane);\n  clickRelLink(modalPane, 'primary');\n  ok(callbackWasCalled, \"modal pane calls given callback when primary button clicked\");\n  ok(!isAppendedToDOM(modalPane), \"modal pane is not in the DOM\");\n  ok(isDestroyed(modalPane), \"modal pane is destroyed\");\n});\n\ntest(\"a modal pane calls callback which explicitly removes pane after second click from the DOM\", function() {\n  var callback = function() { callbackWasCalledCount++; return callbackWasCalledCount > 1;},\n      callbackWasCalledCount = 0;\n  modalPane = Bootstrap.ModalPane.create({\n    primary: 'Primary button',\n    callback: callback\n  });\n  appendIntoDOM(modalPane);\n  clickRelLink(modalPane, 'primary');\n  ok(isAppendedToDOM(modalPane), \"modal pane is in the DOM\");\n  ok(!isDestroyed(modalPane), \"modal pane is not destroyed\");\n  clickRelLink(modalPane, 'primary');\n  ok(callbackWasCalledCount === 2, \"modal pane calls given callback when primary button clicked\");\n  ok(!isAppendedToDOM(modalPane), \"modal pane is not in the DOM\");\n  ok(isDestroyed(modalPane), \"modal pane is destroyed\");\n});\n\ntest(\"a modal pane calls callback when secondary button clicked and removes pane from the DOM\", function() {\n  var callback = function() { callbackWasCalled = true; },\n      callbackWasCalled = false;\n  modalPane = Bootstrap.ModalPane.create({\n    secondary: 'Secondary button',\n    callback: callback\n  });\n  appendIntoDOM(modalPane);\n  clickRelLink(modalPane, 'secondary');\n  ok(callbackWasCalled, \"modal pane calls given callback when secondary button clicked\");\n  ok(!isAppendedToDOM(modalPane), \"modal pane is not in the DOM\");\n  ok(isDestroyed(modalPane), \"modal pane is destroyed\");\n});\n\ntest(\"a modal pane removes itself from the DOM when escape pressed\", function() {\n  var callback = function() { callbackWasCalled = true; },\n      callbackWasCalled = false,\n      event;\n  modalPane = Bootstrap.ModalPane.create({\n    secondary: 'Secondary button',\n    callback: callback\n  });\n  appendIntoDOM(modalPane);\n  event = Ember.Object.create({ keyCode: 27 });\n  Ember.run(function() {\n    modalPane.keyPress(event);\n  });\n  ok(callbackWasCalled, \"modal pane calls given callback when secondary button clicked\");\n  ok(!isAppendedToDOM(modalPane), \"modal pane is not in the DOM\");\n  ok(isDestroyed(modalPane), \"modal pane is destroyed\");\n});\n\ntest(\"a modal pane appends and removes backdrop to its parent\", function() {\n  modalPane = Bootstrap.ModalPane.create();\n  ok(!documentHasSelector('body > .modal-backdrop'), \"modal pane does not append backdrop before inserting into DOM\");\n  appendIntoDOM(modalPane);\n  ok(documentHasSelector('body > .modal-backdrop'), \"modal pane appends backdrop after inserting into DOM\");\n  destroyIfNecessary(modalPane);\n  ok(!documentHasSelector('body > .modal-backdrop'), \"modal pane removes backdrop after destroying\");\n});\n\ntest(\"a modal pane does not append or remove backdrop to its parent if showBackdrop is false\", function() {\n  modalPane = Bootstrap.ModalPane.create({ showBackdrop: false });\n  appendIntoDOM(modalPane);\n  ok(!documentHasSelector('body > .modal-backdrop'), \"modal pane does not append backdrop after inserting into DOM\");\n});\n\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/modal_pane_test");minispade.register('ember-bootstrap/~tests/views/nav_list_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar jQuery = window.jQuery;\nvar navList;\n\nmodule(\"Bootstrap.NavList\", {\n  setup: function() {\n  },\n  teardown: function() {\n    destroyIfNecessary(navList);\n  }\n});\n\ntest(\"a navigation list can be created and appended to DOM\", function() {\n  navList = Bootstrap.NavList.create({ content: new A() });\n  appendIntoDOM(navList);\n  ok(isAppendedToDOM(navList), 'a nav list has a layer in the DOM');\n});\n\ntest(\"a navigation list binds titles from content array to DOM\", function() {\n  var layer;\n  navList = Bootstrap.NavList.create({\n    content: new A(['Hello', 'Ohai'])\n  });\n  appendIntoDOM(navList);\n  layer = navList.$();\n  equal(layer.find('li a').length, 2, 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'a nav list has a layer in the DOM');\n});\n\ntest(\"a navigation list binds titles from object to DOM\", function() {\n  var layer;\n  navList = Bootstrap.NavList.create({\n    content: new A([\n      { title: 'Hello' },\n      { title: 'Ohai' }\n    ])\n  });\n  appendIntoDOM(navList);\n  layer = navList.$();\n  equal(layer.find('li a').length, 2, 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'a nav list has a layer in the DOM');\n});\n\ntest(\"a navigation list binds titles from custom property to DOM\", function() {\n  var layer;\n  navList = Bootstrap.NavList.create({\n    itemTitleKey: 'myKey',\n    content: new A([\n      { myKey: 'Hello' },\n      { myKey: 'Ohai' },\n    ])\n  });\n  appendIntoDOM(navList);\n  layer = navList.$();\n  equal(layer.find('li a').length, 2, 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'a nav list has a layer in the DOM');\n});\n\ntest(\"a navigation list binds links from object to DOM\", function() {\n  var layer;\n  navList = Bootstrap.NavList.create({\n    content: new A([\n      { link: '/hello' },\n      { }\n    ])\n  });\n  appendIntoDOM(navList);\n  layer = navList.$();\n  equal(layer.find('li a').length, 2, 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).attr('href'), '/hello', 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).attr('href'), '#', 'a nav list has a layer in the DOM');\n});\n\ntest(\"a navigation list binds links from custom property to DOM\", function() {\n  var layer;\n  navList = Bootstrap.NavList.create({\n    itemHrefKey: 'myLink',\n    content: new A([\n      { myLink: '/hello' },\n      { myLink: '/ohai' },\n    ])\n  });\n  appendIntoDOM(navList);\n  layer = navList.$();\n  equal(layer.find('li a').length, 2, 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).attr('href'), '/hello', 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).attr('href'), '/ohai', 'a nav list has a layer in the DOM');\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/nav_list_test");minispade.register('ember-bootstrap/~tests/views/pager_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar pager;\n\nmodule(\"Bootstrap.Pager\", {\n  setup: function() {\n  },\n  teardown: function() {\n    destroyIfNecessary(pager);\n  }\n});\n\ntest(\"a pager can be created and appended to DOM\", function() {\n  pager = Bootstrap.Pager.create();\n  appendIntoDOM(pager);\n  ok(isAppendedToDOM(pager), \"a pager has a layer in the DOM\");\n});\n\ntest(\"a pager has defaults\", function() {\n  pager = Bootstrap.Pager.create();\n  appendIntoDOM(pager);\n  equal(pager.$(\"li\").size(), 2, \"a pager has 2 children\");\n\n  ok(!pager.$().children(\":first\").hasClass(\"previous\"), \"the first pager child does not have previous class\");\n  ok(!pager.$().children(\":last\").hasClass(\"next\"), \"the last (second) pager child does not have next class\");\n\n  equal(pager.$().children(\":first\").text(), \"←\", \"the first pager child text should be '&larr;'\");\n  equal(pager.$().children(\":last\").text(), \"→\", \"the last (second) pager child text should be '&arr;'\");\n});\n\ntest(\"a pager binds content to innerHTML anchor\", function() {\n  pager = Bootstrap.Pager.create({ content: new A([Ember.Object.create({title:\"previous\"}), Ember.Object.create({title:\"next\"})]) });\n  appendIntoDOM(pager);\n  equal(pager.$().children(\":first\").text(), \"previous\", \"the first pager child text should be 'previous'\");\n  equal(pager.$().children(\":last\").text(), \"next\", \"the last (second) pager child text should be 'next'\");\n  Ember.run(function() {\n    pager.set(\"content.firstObject.title\", \"previous\");\n    pager.set(\"content.lastObject.title\", \"next\");\n  });\n  equal(pager.$().children(\":first\").text(), \"previous\", \"the first pager child text should be 'previous'\");\n  equal(pager.$().children(\":last\").text(), \"next\", \"the last (second) pager child text should be 'next'\");\n  Ember.run(function() {\n    pager.set(\"content\", new A([Ember.Object.create({title:\"< previous\"}), Ember.Object.create({title:\"next >\"})]) );\n  });\n  equal(pager.$().children(\":first\").text(), \"< previous\", \"the first pager child text should be '< previous'\");\n  equal(pager.$().children(\":last\").text(), \"next >\", \"the last (second) pager child text should be 'next >'\");\n});\n\ntest(\"a pager binds previous/next attributes to classes\", function() {\n  pager = Bootstrap.Pager.create();\n  appendIntoDOM(pager);\n  Ember.run(function() {\n    pager.set(\"content.firstObject.previous\", true);\n    pager.set(\"content.lastObject.next\", true);\n  });  \n  ok(pager.$().children(\":first\").hasClass(\"previous\"), \"the first pager child has a previous class\");\n  ok(pager.$().children(\":last\").hasClass(\"next\"), \"the last (second) pager child has a next class\");\n});\n\ntest(\"a pager binds disabled attributes to classes\", function() {\n  pager = Bootstrap.Pager.create();\n  appendIntoDOM(pager);\n  Ember.run(function() {\n    pager.set(\"content.firstObject.disabled\", true);\n  });  \n  ok(pager.$().children(\":first\").hasClass(\"disabled\"), \"the first pager child has a 'disabled' class\");\n  ok(!pager.$().children(\":last\").hasClass(\"disabled\"), \"the last (second) pager child does not have a 'disabled' class\");\n  Ember.run(function() {\n    pager.set(\"content.firstObject.disabled\", false);\n    pager.set(\"content.lastObject.disabled\", true);\n  });  \n  ok(!pager.$().children(\":first\").hasClass(\"disabled\"), \"the first pager child has a 'disabled' class\");\n  ok(pager.$().children(\":last\").hasClass(\"disabled\"), \"the last (second) pager child does not have a 'disabled' class\");\n});\n\n// TODO Test the href....\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/pager_test");minispade.register('ember-bootstrap/~tests/views/pagination_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar pagination;\n\nmodule(\"Bootstrap.Pagination\", {\n  setup: function() {\n  },\n  teardown: function() {\n    destroyIfNecessary(pagination);\n  }\n});\n\ntest(\"a pagination can be created and appended to DOM\", function() {\n  pagination = Bootstrap.Pagination.create();\n  appendIntoDOM(pagination);\n\n  ok(isAppendedToDOM(pagination), \"a pagination has a layer in the DOM\");\n});\n\ntest(\"a pagination has content and defaults\", function() {\n  pagination = Bootstrap.Pagination.create({ content: new A([]) });\n  appendIntoDOM(pagination);\n\n  equal(get(pagination, \"content.length\"), 0, \"the pagination content is empty\");\n  ok(pagination.$().hasClass(\"pagination\"), \"a pagination has 'pagination' as class name\");\n});\n\ntest(\"a pagination has content and defaults\", function() {\n  pagination = Bootstrap.Pagination.create({\n    content: new A([\"1\", \"2\", \"3\"])\n  });\n  appendIntoDOM(pagination);\n  equal(get(pagination, \"content.length\"), 3, \"a pagination with content 1, 2, 3 should have a content length of three\");\n  equal(pagination.$(\"li\").size(), 3, \"a pagination with content 1, 2, 3 should have three li\");\n  Ember.run(function() {\n    pagination.set(\"selection\",  \"1\");\n  });\n  equal(pagination.$(\".active\").size(), 1, \"a pagination being selected has an element with an active class\");\n  Ember.run(function() {\n    pagination.set(\"selection\",  \"3\");\n  });\n  equal(pagination.$(\".active\").size(), 1, \"a pagination being selected has an element with an active class\");\n  ok(!pagination.$(\"li:first\").hasClass(\"active\"), \"a pagination not being selected is not an element with an active class\");\n  ok(pagination.$(\"li:last\").hasClass(\"active\"), \"a pagination being selected has an element with an active class\");\n\n  equal(pagination.$(\"li a[href='#']\").size(), 3, \"a pagination with 3 components have all '#' as href\");\n});\n\ntest(\"a pagination has content and defaults\", function() {\n  var o1 = Ember.Object.create({title:\"1\"});\n  var o2 = Ember.Object.create({title:\"2\"});\n  var o3 = Ember.Object.create({title:\"3\"});\n  pagination = Bootstrap.Pagination.create({\n    content: new A([o1, o2, o3])\n  });\n  appendIntoDOM(pagination);\n  equal(get(pagination, \"content.length\"), 3, \"a pagination with content 1, 2, 3 should have a content length of three\");\n  equal(pagination.$(\"li\").size(), 3, \"a pagination with content 1, 2, 3 should have three li\");\n  Ember.run(function() {\n    pagination.set(\"selection\",  o1);\n  });\n  equal(pagination.$(\".active\").size(), 1, \"a pagination being selected has an element with an active class\");\n  Ember.run(function() {\n    pagination.set(\"selection\",  o3);\n  });\n  equal(pagination.$(\".active\").size(), 1, \"a pagination being selected has an element with an active class\");\n  ok(!pagination.$(\"li:first\").hasClass(\"active\"), \"a pagination not being selected is not an element with an active class\");\n  ok(pagination.$(\"li:last\").hasClass(\"active\"), \"a pagination being selected has an element with an active class\");\n  \n  equal(pagination.$(\"li a[href='#']\").size(), 3, \"a pagination with 3 components have all '#' as href\");\n});\n\ntest(\"a pagination has content and defaults\", function() {\n  var o1 = Ember.Object.create({title:\"1\", href:\"1\"});\n  var o2 = Ember.Object.create({title:\"2\", href:\"2\"});\n  var o3 = Ember.Object.create({title:\"3\", href:\"3\"});\n  pagination = Bootstrap.Pagination.create({\n    content: new A([o1, o2, o3])\n  });\n  appendIntoDOM(pagination);\n  equal(get(pagination, \"content.length\"), 3, \"a pagination with content 1, 2, 3 should have a content length of three\");\n  equal(pagination.$(\"li\").size(), 3, \"a pagination with content 1, 2, 3 should have three li\");\n  Ember.run(function() {\n    pagination.set(\"selection\",  o1);\n  });\n  equal(pagination.$(\".active\").size(), 1, \"a pagination being selected has an element with an active class\");\n  Ember.run(function() {\n    pagination.set(\"selection\",  o3);\n  });\n  equal(pagination.$(\".active\").size(), 1, \"a pagination being selected has an element with an active class\");\n  ok(!pagination.$(\"li:first\").hasClass(\"active\"), \"a pagination not being selected is not an element with an active class\");\n  ok(pagination.$(\"li:last\").hasClass(\"active\"), \"a pagination being selected has an element with an active class\");\n  \n  equal(pagination.$(\"li a[href='#']\").size(), 0, \"a pagination with 3 components have no '#' as href\");\n  \n  equal(pagination.$(\"li:first a\").attr(\"href\"), \"1\", \"the first 'href' value is '1'\");\n  equal(pagination.$(\"li:last a\").attr(\"href\"), \"3\", \"the last 'href' value is '3'\");\n});\n\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/pagination_test");minispade.register('ember-bootstrap/~tests/views/pill_item_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar jQuery = window.jQuery;\nvar application, pillItem, parentView;\n\nmodule(\"Bootstrap.PillItem\", {\n  setup: function() {\n    application = Ember.Application.create();\n  },\n  teardown: function() {\n    destroyIfNecessary(pillItem);\n    destroyIfNecessary(parentView);\n    destroyIfNecessary(application);\n  }\n});\n\ntest(\"a pill item can be created and appended to DOM\", function() {\n  pillItem = Bootstrap.PillItem.create();\n  appendIntoDOM(pillItem);\n  ok(isAppendedToDOM(pillItem), 'a pillItem pane has a layer in the DOM');\n});\n\ntest(\"a pill item binds content property to DOM\", function() {\n  var content = 'oh my output';\n  pillItem = Bootstrap.PillItem.create();\n  pillItem.set('content', content);\n  Ember.run(function() {\n    pillItem.append();\n  });\n  equal(pillItem.$().find('a').text(), content, 'pill item binds given content to DOM');\n});\n\ntest(\"a pill item binds parentView titles from content array to DOM\", function() {\n  var layer;\n  parentView = Ember.CollectionView.create({\n    tagName: 'ul',\n    itemViewClass: Bootstrap.PillItem,\n    content: new A(['Hello', 'Ohai'])\n  });\n  appendIntoDOM(parentView);\n  layer = parentView.$();\n  equal(layer.find('li a').length, 2, 'a nav list has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'a pill item has proper title');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'a pill item has proper title');\n});\n\ntest(\"a pill item binds parentView titles from object to DOM\", function() {\n  var layer;\n  parentView = Ember.CollectionView.create({\n    tagName: 'ul',\n    itemViewClass: Bootstrap.PillItem,\n    content: new A([\n      { title: 'Hello' },\n      { title: 'Ohai' }\n    ])\n  });\n  appendIntoDOM(parentView);\n  layer = parentView.$();\n  equal(layer.find('li a').length, 2, 'a parent has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'a pill item has proper title');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'a pill item has proper title');\n});\n\ntest(\"a pill item binds parentView link from object to DOM\", function() {\n  var layer;\n  parentView = Ember.CollectionView.create({\n    tagName: 'ul',\n    itemViewClass: Bootstrap.PillItem,\n    content: new A([\n      { link: '/hello' },\n      { }\n    ])\n  });\n  appendIntoDOM(parentView);\n  layer = parentView.$();\n  equal(layer.find('li a').length, 2, 'a parent view has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).attr('href'), '/hello', 'a pill item has proper link');\n  equal(jQuery(layer.find('li a')[1]).attr('href'), '#', 'a pill item has proper link');\n});\n\ntest(\"a pill item binds parentView links from custom property to DOM\", function() {\n  var layer;\n  parentView = Ember.CollectionView.create({\n    tagName: 'ul',\n    itemViewClass: Bootstrap.PillItem,\n    itemHrefKey: 'myLink',\n    content: new A([\n      { myLink: '/hello' },\n      { myLink: '/ohai' },\n    ])\n  });\n  appendIntoDOM(parentView);\n  layer = parentView.$();\n  equal(layer.find('li a').length, 2, 'a parent view has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).attr('href'), '/hello', 'a pill item has proper link');\n  equal(jQuery(layer.find('li a')[1]).attr('href'), '/ohai', 'a pill item has proper link');\n});\n\ntest(\"a pill sets selection on parentView when clicked\", function() {\n  parentView = Ember.CollectionView.create({\n    tagName: 'ul',\n    itemViewClass: Bootstrap.PillItem,\n    content: new A(['A', 'B', 'C']),\n    selection: null\n  });\n  appendIntoDOM(parentView);\n  parentView.$().find('li:last').click(); // select the last pill\n  equal(parentView.get('selection'), 'C', \"pill item sets its content as a selection\");\n  parentView.$().find('li:first').click(); // select the first pill\n  equal(parentView.get('selection'), 'A', \"pill item sets its content as a selection\");\n});\n\ntest(\"a pill has active class when parent view has selection of item content\", function() {\n  parentView = Ember.CollectionView.create({\n    tagName: 'ul',\n    itemViewClass: Bootstrap.PillItem,\n    content: new A(['A', 'B', 'C']),\n    selection: 'A'\n  });\n  appendIntoDOM(parentView);\n  ok(parentView.$().find('li:first').hasClass('active'), \"selected item has active class\");\n  Ember.run(function() {\n    parentView.set('selection', 'C');\n  });\n  ok(parentView.$().find('li:last').hasClass('active'), \"only selected item has active class\");\n  ok(!parentView.$().find('li:first').hasClass('active'), \"only selected item has active class\");\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/pill_item_test");minispade.register('ember-bootstrap/~tests/views/pills_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar jQuery = window.jQuery;\nvar application, pills;\n\nmodule(\"Bootstrap.Pills\", {\n  setup: function() {\n    application = Ember.Application.create();\n  },\n  teardown: function() {\n    destroyIfNecessary(pills);\n    destroyIfNecessary(application);\n  }\n});\n\ntest(\"pills can be created and appended to DOM\", function() {\n  pills = Bootstrap.Pills.create({ content: new A() });\n  appendIntoDOM(pills);\n  ok(isAppendedToDOM(pills), 'a pills pane has a layer in the DOM');\n});\n\ntest(\"pills can be stacked\", function() {\n  pills = Bootstrap.Pills.create({ content: new A(), isStacked: true });\n  appendIntoDOM(pills);\n  ok(pills.$().hasClass('nav-stacked'), 'an alert binds type property to class');\n});\n\ntest(\"pills binds titles from content array to DOM\", function() {\n  var layer;\n  pills = Bootstrap.Pills.create({\n    content: new A(['Hello', 'Ohai'])\n  });\n  appendIntoDOM(pills);\n  layer = pills.$();\n  equal(layer.find('li a').length, 2, 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'pills has a layer in the DOM');\n});\n\ntest(\"pills list binds titles from object to DOM\", function() {\n  var layer;\n  pills = Bootstrap.Pills.create({\n    content: new A([\n      { title: 'Hello' },\n      { title: 'Ohai' }\n    ])\n  });\n  appendIntoDOM(pills);\n  layer = pills.$();\n  equal(layer.find('li a').length, 2, 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'pills has a layer in the DOM');\n});\n\ntest(\"pills binds titles from custom property to DOM\", function() {\n  var layer;\n  pills = Bootstrap.Pills.create({\n    itemTitleKey: 'myKey',\n    content: new A([\n      { myKey: 'Hello' },\n      { myKey: 'Ohai' },\n    ])\n  });\n  appendIntoDOM(pills);\n  layer = pills.$();\n  equal(layer.find('li a').length, 2, 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'pills has a layer in the DOM');\n});\n\ntest(\"pills binds links from object to DOM\", function() {\n  var layer;\n  pills = Bootstrap.Pills.create({\n    content: new A([\n      { link: '/hello' },\n      { }\n    ])\n  });\n  appendIntoDOM(pills);\n  layer = pills.$();\n  equal(layer.find('li a').length, 2, 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).attr('href'), '/hello', 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).attr('href'), '#', 'pills has a layer in the DOM');\n});\n\ntest(\"pills binds links from custom property to DOM\", function() {\n  var layer;\n  pills = Bootstrap.Pills.create({\n    itemHrefKey: 'myLink',\n    content: new A([\n      { myLink: '/hello' },\n      { myLink: '/ohai' },\n    ])\n  });\n  appendIntoDOM(pills);\n  layer = pills.$();\n  equal(layer.find('li a').length, 2, 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).attr('href'), '/hello', 'pills has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).attr('href'), '/ohai', 'pills has a layer in the DOM');\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/pills_test");minispade.register('ember-bootstrap/~tests/views/progress_bar_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar progressBar;\n\nmodule(\"Bootstrap.ProgressBar\", {\n  setup: function() {\n  },\n  teardown: function() {\n    destroyIfNecessary(progressBar);\n  }\n});\n\ntest(\"a progress bar can be created and appended to DOM\", function() {\n  progressBar = Bootstrap.ProgressBar.create();\n  appendIntoDOM(progressBar);\n  ok(isAppendedToDOM(progressBar), 'a progress bar has a layer in the DOM');\n});\n\ntest(\"a progress bar binds progress as a width to inner bar div\", function() {\n  progressBar = Bootstrap.ProgressBar.create({ progress: 50 });\n  appendIntoDOM(progressBar);\n  equal(progressBar.$().find('.bar').attr('style'), 'width:50%;',\n        'a progress bar binds progress as inner bar width');\n});\n\ntest(\"a progress bar binds striped class based on isStriped\", function() {\n  progressBar = Bootstrap.ProgressBar.create({ isStriped: true, progress: 50 });\n  appendIntoDOM(progressBar);\n  ok(progressBar.$().hasClass('progress-striped'), 'a progress bar has striped class');\n});\n\ntest(\"a progress bar binds active class based on isAnimated\", function() {\n  progressBar = Bootstrap.ProgressBar.create({ isStriped: true, isAnimated: true, progress: 50 });\n  appendIntoDOM(progressBar);\n  ok(progressBar.$().hasClass('progress-striped'), 'a progress bar has striped class');\n});\n\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/progress_bar_test");minispade.register('ember-bootstrap/~tests/views/tabs_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar jQuery = window.jQuery;\nvar tabs;\n\nmodule(\"Bootstrap.Tabs\", {\n  setup: function() {\n  },\n  teardown: function() {\n    destroyIfNecessary(tabs);\n  }\n});\n\ntest(\"tabs can be created and appended to DOM\", function() {\n  tabs = Bootstrap.Tabs.create({ content: new A() });\n  appendIntoDOM(tabs);\n  ok(isAppendedToDOM(tabs), 'a tabs pane has a layer in the DOM');\n});\n\ntest(\"tabs can be stacked\", function() {\n  tabs = Bootstrap.Tabs.create({ content: new A(), isStacked: true });\n  appendIntoDOM(tabs);\n  ok(tabs.$().hasClass('nav-stacked'), 'an alert binds type property to class');\n});\n\ntest(\"tabs binds titles from content array to DOM\", function() {\n  var layer;\n  tabs = Bootstrap.Tabs.create({\n    content: new A(['Hello', 'Ohai'])\n  });\n  appendIntoDOM(tabs);\n  layer = tabs.$();\n  equal(layer.find('li a').length, 2, 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'tabs has a layer in the DOM');\n});\n\ntest(\"tabs list binds titles from object to DOM\", function() {\n  var layer;\n  tabs = Bootstrap.Tabs.create({\n    content: new A([\n      { title: 'Hello' },\n      { title: 'Ohai' }\n    ])\n  });\n  appendIntoDOM(tabs);\n  layer = tabs.$();\n  equal(layer.find('li a').length, 2, 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'tabs has a layer in the DOM');\n});\n\ntest(\"tabs binds titles from custom property to DOM\", function() {\n  var layer;\n  tabs = Bootstrap.Tabs.create({\n    itemTitleKey: 'myKey',\n    content: new A([\n      { myKey: 'Hello' },\n      { myKey: 'Ohai' },\n    ])\n  });\n  appendIntoDOM(tabs);\n  layer = tabs.$();\n  equal(layer.find('li a').length, 2, 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).text(), 'Hello', 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).text(), 'Ohai', 'tabs has a layer in the DOM');\n});\n\ntest(\"tabs binds links from object to DOM\", function() {\n  var layer;\n  tabs = Bootstrap.Tabs.create({\n    content: new A([\n      { link: '/hello' },\n      { }\n    ])\n  });\n  appendIntoDOM(tabs);\n  layer = tabs.$();\n  equal(layer.find('li a').length, 2, 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).attr('href'), '/hello', 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).attr('href'), '#', 'tabs has a layer in the DOM');\n});\n\ntest(\"tabs binds links from custom property to DOM\", function() {\n  var layer;\n  tabs = Bootstrap.Tabs.create({\n    itemHrefKey: 'myLink',\n    content: new A([\n      { myLink: '/hello' },\n      { myLink: '/ohai' },\n    ])\n  });\n  appendIntoDOM(tabs);\n  layer = tabs.$();\n  equal(layer.find('li a').length, 2, 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[0]).attr('href'), '/hello', 'tabs has a layer in the DOM');\n  equal(jQuery(layer.find('li a')[1]).attr('href'), '/ohai', 'tabs has a layer in the DOM');\n});\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/tabs_test");minispade.register('ember-bootstrap/~tests/views/well_test', "(function() {var get = Ember.get, set = Ember.set, A = Ember.A;\nvar well;\n\nmodule(\"Bootstrap.Well\", {\n  setup: function() {\n  },\n  teardown: function() {\n    destroyIfNecessary(well);\n  }\n});\n\ntest(\"a well can be created and appended to DOM\", function() {\n  well = Bootstrap.Well.create();\n  appendIntoDOM(well);\n  ok(isAppendedToDOM(well), 'a well has a layer in the DOM');\n});\n\ntest(\"a well binds content to innerHTML div\", function() {\n  well = Bootstrap.Well.create({ content: 'it is a well' });\n  appendIntoDOM(well);\n  equal(well.$().text(), 'it is a well', 'a well binds content in innerHTML');\n  Ember.run(function() {\n    well.set('content', 'the well changed');\n  });\n  equal(well.$().text(), 'the well changed', 'a well binds content in innerHTML');\n});\n\n\n})();\n//@ sourceURL=ember-bootstrap/~tests/views/well_test");